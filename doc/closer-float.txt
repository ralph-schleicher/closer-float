CLOSER-FLOAT

Closer to floating-point arithmetic.

Provide a common interface to IEEE 754 (a.k.a. ISO/IEC/IEEE 60559)
and ISO/IEC 10967 features.

The general rule is: If a symbol is not bound, then the corresponding
feature is not supported by the implementation.  Therefore, you can
use ‘boundp’ and ‘fboundp’ to check for a feature at run-time.

As an alternative, the Closer Float library also defines some feature
test macros to check for features at compile-time.  Below is a table
of all feature test macros together with their meaning.

closer-float-signed-zero
     True if there are distinct representations for positive and
     negative floating-point zero.  If so, the predicate functions
     ‘float-positive-zero-p’ and ‘float-negative-zero-p’ are defined
     for all float types.

closer-float-sign-symmetry
     True if there is sign symmetry in the range of floating-point
     numbers.  That means, for any positive floating-point number
     there is a corresponding negative floating-point number.  This
     includes positive and negative infinity if infinite numbers are
     defined.

closer-float-infinity
     True if the positive and negative infinity constants and the
     respective predicate functions ‘float-positive-infinity-p’ and
     ‘float-negative-infinity-p’ are defined for all float types.  If
     sign symmetry is defined, the sign symmetric infinity constants
     and the predicate function ‘float-infinity-p’ are defined, too.

closer-float-not-a-number
     True if a default not-a-number constant and the predicate
     function ‘float-not-a-number-p’ is defined for all float types.

closer-float-rounding-mode
     True if the floating-point rounding mode is accessible.

closer-float-handle-traps
     True if the floating-point exceptions can be managed.

                                                                      [Constant]
double-float-infinity
   Value of positive infinity.
   The following identities hold:
   
        (= double-float-infinity double-float-positive-infinity)
   and
        (= (- double-float-infinity) double-float-negative-infinity)

                                                                      [Constant]
double-float-negative-infinity
   Value of negative infinity.

                                                                      [Constant]
double-float-not-a-number
   Value of the default not-a-number.

                                                                      [Constant]
double-float-positive-infinity
   Value of positive infinity.

                                                                      [Constant]
double-float-quiet-not-a-number
   Value of a quiet not-a-number.

                                                                      [Constant]
double-float-signaling-not-a-number
   Value of a signaling not-a-number.

                                                                      [Constant]
exception-keywords
   The list of exception keywords used in the implementation.
   
   Below is a table of all exception keywords together with their
   meaning.
   
        :invalid-operation
             Invalid operation; ‘floating-point-invalid-operation’
             condition.
   
        :division-by-zero
             Division by zero; ‘division-by-zero’ condition.
   
        :overflow
             Floating-point overflow; ‘floating-point-overflow’
             condition.
   
        :underflow
             Floating-point underflow; ‘floating-point-underflow’
             condition.
   
        :inexact
             Inexact result; ‘floating-point-inexact’ condition.
   
   The value and meaning of other floating-point exceptions used in
   the implementation is not standardized.  The only known exception
   of this kind is the denormalized operand exception of the Intel
   x86 architecture.  Whether or not non-standard exceptions are
   exposed to the user is implementation dependent.

                                                                      [Function]
float-infinity-p (x)
   True if the floating-point number argument is infinite.

                                                                      [Function]
float-negative-infinity-p (x)
   True if the floating-point number argument is equal to negative infinity.

                                                                      [Function]
float-negative-zero-p (x)
   True if the argument is negative zero.
   
   Argument X is any floating-point number, including infinity and
    not-a-number.
   
   If signed zero is not used in the implementation, always return
   false.

                                                                      [Function]
float-not-a-number-p (x)
   True if the floating-point number argument is not-a-number.

                                                                      [Function]
float-positive-infinity-p (x)
   True if the floating-point number argument is equal to positive infinity.

                                                                      [Function]
float-positive-zero-p (x)
   True if the argument is positive zero.
   
   Argument X is any floating-point number, including infinity and
    not-a-number.
   
   If signed zero is not used in the implementation, return true if
   X is zero.

                                                                      [Function]
float-quiet-not-a-number-p (x)
   True if the floating-point number argument is a quiet not-a-number.

                                                                      [Function]
float-signaling-not-a-number-p (x)
   True if the floating-point number argument is a signaling not-a-number.

                                                                      [Function]
float-zero-p (x)
   True if the argument is zero.
   
   Argument X is any floating-point number, including infinity and
    not-a-number.
   
   If signed zero is used in the implementation, return true if the
   absolute value of X is zero.

                                                                      [Constant]
long-float-infinity
   Value of positive infinity.
   The following identities hold:
   
        (= long-float-infinity long-float-positive-infinity)
   and
        (= (- long-float-infinity) long-float-negative-infinity)

                                                                      [Constant]
long-float-negative-infinity
   Value of negative infinity.

                                                                      [Constant]
long-float-not-a-number
   Value of the default not-a-number.

                                                                      [Constant]
long-float-positive-infinity
   Value of positive infinity.

                                                                      [Constant]
long-float-quiet-not-a-number
   Value of a quiet not-a-number.

                                                                      [Constant]
long-float-signaling-not-a-number
   Value of a signaling not-a-number.

                                                                      [Function]
masked-traps ()
   Accessor for the disabled floating-point exceptions.
   
   Value is a list of exception keywords.
   
   The ‘exception-keywords’ variable lists the exception keywords
   used in the implementation.
   
   A ‘program-error’ is signaled if you attempt to mask a trap not
   used in the implementation.

                                                                      [Function]
rounding-mode ()
   Accessor for the floating-point rounding mode.
   
   Value is a rounding mode keyword.
   
   When setting the rounding mode, ‘:nearest’ is a synonym for
   ‘:nearest-even’.
   
   The ‘rounding-mode-keywords’ variable lists the rounding mode
   keywords used in the implementation.
   
   A ‘program-error’ is signaled if you attempt to set a rounding
   mode not used in the implementation.

                                                                      [Constant]
rounding-mode-keywords
   The list of rounding mode keywords used in the implementation.
   
   Below is a table of all rounding mode keywords together with their
   meaning.
   
        :nearest-even
             Round to nearest, ties to even.
   
        :nearest-away
             Round to nearest, ties away from zero.
   
        :up
             Direct rounding towards positive infinity.
   
        :down
             Direct rounding towards negative infinity.
   
        :zero
             Direct rounding towards zero.
   
   The ‘:nearest-away’ rounding mode is defined by IEEE 754 as
   an option for the decimal floating-point formats.  It is not
   defined, for example, in the C floating-point environment
   ‘fenv.h’.  Thus, chances are low that this rounding mode is
   used in the implementation.

                                                                      [Constant]
short-float-infinity
   Value of positive infinity.
   The following identities hold:
   
        (= short-float-infinity short-float-positive-infinity)
   and
        (= (- short-float-infinity) short-float-negative-infinity)

                                                                      [Constant]
short-float-negative-infinity
   Value of negative infinity.

                                                                      [Constant]
short-float-not-a-number
   Value of the default not-a-number.

                                                                      [Constant]
short-float-positive-infinity
   Value of positive infinity.

                                                                      [Constant]
short-float-quiet-not-a-number
   Value of a quiet not-a-number.

                                                                      [Constant]
short-float-signaling-not-a-number
   Value of a signaling not-a-number.

                                                                      [Constant]
single-float-infinity
   Value of positive infinity.
   The following identities hold:
   
        (= single-float-infinity single-float-positive-infinity)
   and
        (= (- single-float-infinity) single-float-negative-infinity)

                                                                      [Constant]
single-float-negative-infinity
   Value of negative infinity.

                                                                      [Constant]
single-float-not-a-number
   Value of the default not-a-number.

                                                                      [Constant]
single-float-positive-infinity
   Value of positive infinity.

                                                                      [Constant]
single-float-quiet-not-a-number
   Value of a quiet not-a-number.

                                                                      [Constant]
single-float-signaling-not-a-number
   Value of a signaling not-a-number.

                                                                      [Function]
unmasked-traps ()
   Accessor for the enabled floating-point exceptions.
   
   Value is a list of exception keywords.
   
   When enabling floating-point exceptions, a value of ‘t’ is a
   synonym for all exceptions.
   
   The ‘exception-keywords’ variable lists the exception keywords
   used in the implementation.
   
   A ‘program-error’ is signaled if you attempt to unmask a trap,
   i.e. enable an exception, not used in the implementation.

                                                                         [Macro]
with-masked-traps (traps &body body)
   Establish a lexical environment where the floating-point exceptions
   listed in TRAPS are disabled.  If argument TRAPS is ‘t’, disable all
   exceptions.  When BODY returns, the previous signaling exceptions are
   restored.

                                                                         [Macro]
with-masked-traps* (traps &body body)
   Like ‘with-masked-traps’ except that traps accumulate.

                                                                         [Macro]
with-rounding-mode (rounding-mode &body body)
   Establish a lexical environment with the current rounding mode set
   to ROUNDING-MODE.  If argument ROUNDING-MODE is ‘nil’, don't change
   the current rounding mode.  When BODY returns, the previous rounding
   mode is restored.

                                                                         [Macro]
with-unmasked-traps (traps &body body)
   Establish a lexical environment where the floating-point exceptions
   listed in TRAPS are enabled.  If argument TRAPS is ‘t’, enable all
   exceptions.  When BODY returns, the previous signaling exceptions are
   restored.

                                                                         [Macro]
with-unmasked-traps* (traps &body body)
   Like ‘with-unmasked-traps’ except that traps accumulate.
